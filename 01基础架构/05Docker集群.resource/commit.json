{"compress":true,"commitItems":[["f28ef585-aa91-4870-813e-32f1723404ec",1523175856989,"",[[1523175804332,["Administrator@SC-201704281511",[[1,0,"05Docker集群\n===\n\n\n"]],[0,0],[17,17]]],[1523175959850,["Administrator@SC-201704281511",[[-1,16,"\n"],[1,17," "]],[17,17],[16,17]]],[1523175962450,["Administrator@SC-201704281511",[[-1,16," "],[1,17,"Docker的集群有"]],[16,17],[26,26]]],[1523175962560,["Administrator@SC-201704281511",[[-1,25,"有"]],[26,26],[25,25]]],[1523175967885,["Administrator@SC-201704281511",[[1,25,"目前主要有两大选择"]],[25,25],[34,34]]],[1523175968368,["Administrator@SC-201704281511",[[-1,31,"大选择"]],[34,34],[31,31]]],[1523175969202,["Administrator@SC-201704281511",[[1,31,"个选"]],[31,31],[33,33]]],[1523175970800,["Administrator@SC-201704281511",[[-1,27,"主要有两个选"]],[33,33],[27,27]]],[1523175975963,["Administrator@SC-201704281511",[[1,27,"主流的有两个选"]],[27,27],[34,34]]],[1523175976401,["Administrator@SC-201704281511",[[-1,33,"选"]],[34,34],[33,33]]],[1523175977341,["Administrator@SC-201704281511",[[1,33,"防范"]],[33,33],[35,35]]],[1523175978122,["Administrator@SC-201704281511",[[-1,33,"防范"]],[35,35],[33,33]]],[1523175978827,["Administrator@SC-201704281511",[[1,33,"方案"]],[33,33],[35,35]]],[1523175982377,["Administrator@SC-201704281511",[[-1,29,"的有两个方案"],[1,35," "]],[29,35],[29,30]]],[1523175983770,["Administrator@SC-201704281511",[[-1,29," "],[1,30,"的方案："]],[29,30],[33,33]]],[1523175984458,["Administrator@SC-201704281511",[[1,33,"\n\n"]],[33,33],[34,34]]],[1523175984920,["Administrator@SC-201704281511",[[1,35,"\n"]],[34,34],[35,35]]],[1523175987155,["Administrator@SC-201704281511",[[-1,35,"\n"],[1,36,"* Swarm"]],[35,35],[42,42]]],[1523175988312,["Administrator@SC-201704281511",[[1,42,"\n\n"]],[42,42],[43,43]]],[1523175988904,["Administrator@SC-201704281511",[[1,44,"\n"]],[43,43],[44,44]]],[1523176016433,["Administrator@SC-201704281511",[[-1,44,"\n"],[1,45,"* Kubernetes"]],[44,44],[56,56]]],[1523176017583,["Administrator@SC-201704281511",[[-1,37,"Swarm"]],[37,42],[37,37]]],[1523176018952,["Administrator@SC-201704281511",[[1,37,"[]"]],[37,37],[39,39]]],[1523176019496,["Administrator@SC-201704281511",[[1,38,"Swarm"]],[38,38],[43,43]]],[1523176020464,["Administrator@SC-201704281511",[[1,44,"()"]],[44,44],[46,46]]],[1523176022536,["Administrator@SC-201704281511",[[-1,50,"Kubernetes"]],[50,60],[50,50]]],[1523176023768,["Administrator@SC-201704281511",[[1,50,"[]"]],[50,50],[52,52]]],[1523176024344,["Administrator@SC-201704281511",[[1,51,"Kubernetes"]],[51,51],[61,61]]],[1523176025208,["Administrator@SC-201704281511",[[1,62,"()"]],[62,62],[64,64]]],[1523176033448,["Administrator@SC-201704281511",[[1,63,"https://kubernetes.io/"]],[63,63],[85,85]]],[1523176046688,["Administrator@SC-201704281511",[[1,45,"https://docs.docker.com/swarm/"]],[45,45],[75,75]]],[1523176048503,["Administrator@SC-201704281511",[[1,116,"\n\n"]],[116,116],[117,117]]],[1523176048647,["Administrator@SC-201704281511",[[1,118,"\n"]],[117,117],[118,118]]],[1523176052634,["Administrator@SC-201704281511",[[-1,118,"\n"],[1,119,"## DockerS"]],[118,118],[128,128]]],[1523176052992,["Administrator@SC-201704281511",[[-1,127,"S"]],[128,128],[127,127]]],[1523176053898,["Administrator@SC-201704281511",[[1,127," Swae"]],[127,127],[132,132]]],[1523176054832,["Administrator@SC-201704281511",[[-1,128,"Swae"]],[132,132],[128,128]]],[1523176056835,["Administrator@SC-201704281511",[[1,128,"Swarm 集群"]],[128,128],[136,136]]],[1523176058831,["Administrator@SC-201704281511",[[1,136,"\n\n"]],[136,136],[137,137]]],[1523176058969,["Administrator@SC-201704281511",[[1,138,"\n"]],[137,137],[138,138]]],[1523176060325,["Administrator@SC-201704281511",[[-1,138,"\n"],[1,139,"我"]],[138,138],[139,139]]],[1523176060529,["Administrator@SC-201704281511",[[-1,138,"我"]],[139,139],[138,138]]],[1523176061424,["Administrator@SC-201704281511",[[1,138,"\n\n"]],[138,138],[139,139]]],[1523176062016,["Administrator@SC-201704281511",[[-1,139,"\n"]],[139,139],[138,138]]],[1523176068970,["Administrator@SC-201704281511",[[-1,138,"\n"],[1,139,"是用Swarm集群来部署一个服务"]],[138,138],[154,154]]],[1523176069625,["Administrator@SC-201704281511",[[-1,152,"服务"]],[154,154],[152,152]]],[1523176071964,["Administrator@SC-201704281511",[[1,152,"无状态的五福"]],[152,152],[158,158]]],[1523176072665,["Administrator@SC-201704281511",[[-1,156,"五福"]],[158,158],[156,156]]],[1523176074865,["Administrator@SC-201704281511",[[1,156,"服务："]],[156,156],[159,159]]],[1523176076160,["Administrator@SC-201704281511",[[1,159,"\n\n"]],[159,159],[160,160]]],[1523176078432,["Administrator@SC-201704281511",[[1,161,"\n"]],[160,160],[161,161]]],[1523176079906,["Administrator@SC-201704281511",[[-1,161,"\n"],[1,162,"按照"]],[161,161],[163,163]]],[1523176080896,["Administrator@SC-201704281511",[[-1,161,"按照"]],[163,163],[161,161]]],[1523176081175,["Administrator@SC-201704281511",[[-1,160,"\n"],[1,161," "]],[161,161],[160,161]]],[1523176081651,["Administrator@SC-201704281511",[[-1,160," "],[1,161,"美誉"]],[160,161],[162,162]]],[1523176081800,["Administrator@SC-201704281511",[[-1,161,"誉"]],[162,162],[161,161]]],[1523176082104,["Administrator@SC-201704281511",[[-1,160,"美"],[1,161,"\n"]],[161,161],[160,160]]],[1523176082361,["Administrator@SC-201704281511",[[1,161,"\n"]],[160,160],[161,161]]],[1523176087226,["Administrator@SC-201704281511",[[-1,161,"\n"],[1,162,"目前有三台物理级"]],[161,161],[169,169]]],[1523176088528,["Administrator@SC-201704281511",[[-1,166,"物理级"]],[169,169],[166,166]]],[1523176090059,["Administrator@SC-201704281511",[[1,166,"无激励"]],[166,166],[169,169]]],[1523176090520,["Administrator@SC-201704281511",[[-1,166,"无激励"]],[169,169],[166,166]]],[1523176095617,["Administrator@SC-201704281511",[[1,166,"物理机node01/"]],[166,166],[176,176]]],[1523176096136,["Administrator@SC-201704281511",[[-1,175,"/"]],[176,176],[175,175]]],[1523176096426,["Administrator@SC-201704281511",[[1,175,"、"]],[175,175],[176,176]]],[1523176110129,["Administrator@SC-201704281511",[[1,176,"node02、node03，在node01上创建Docker"]],[176,176],[206,206]]],[1523176111351,["Administrator@SC-201704281511",[[-1,198,"创建Docker"]],[206,206],[198,198]]],[1523176116113,["Administrator@SC-201704281511",[[1,198,"初始化Swarm："]],[198,198],[207,207]]],[1523176116439,["Administrator@SC-201704281511",[[1,207,"\n\n"]],[207,207],[208,208]]],[1523176116615,["Administrator@SC-201704281511",[[1,209,"\n"]],[208,208],[209,209]]],[1523176118281,["Administrator@SC-201704281511",[[-1,209,"\n"],[1,210,"```shell"]],[209,209],[217,217]]],[1523176118647,["Administrator@SC-201704281511",[[1,217,"\n\n"]],[217,217],[218,218]]],[1523176118792,["Administrator@SC-201704281511",[[1,219,"\n"]],[218,218],[219,219]]],[1523176119216,["Administrator@SC-201704281511",[[-1,219,"\n"],[1,220,"```"]],[219,219],[222,222]]],[1523176215977,["Administrator@SC-201704281511",[[1,218,"docker swarm init --advertise-addr 172.16.14.52"]],[218,218],[265,265]]],[1523176220259,["Administrator@SC-201704281511",[[-1,253,"172.16.14.52"],[1,265,"***"]],[253,265],[256,256]]],[1523176221776,["Administrator@SC-201704281511",[[-1,253,"***"]],[256,256],[253,253]]],[1523176225170,["Administrator@SC-201704281511",[[1,253,"192.168"]],[253,253],[260,260]]],[1523176227216,["Administrator@SC-201704281511",[[-1,253,"192.168"]],[260,260],[253,253]]],[1523176231803,["Administrator@SC-201704281511",[[1,253,"***.***.***.** "]],[253,253],[268,268]]],[1523176232328,["Administrator@SC-201704281511",[[-1,267," "]],[268,268],[267,267]]],[1523176234470,["Administrator@SC-201704281511",[[1,267,"* # 你哦的"]],[267,267],[274,274]]],[1523176234993,["Administrator@SC-201704281511",[[-1,271,"你哦的"]],[274,274],[271,271]]],[1523176237020,["Administrator@SC-201704281511",[[1,271,"你的IP地址"]],[271,271],[277,277]]],[1523176914192,["Administrator@SC-201704281511",[[1,281,"\n\n"]],[281,281],[282,282]]],[1523176914328,["Administrator@SC-201704281511",[[1,283,"\n"]],[282,282],[283,283]]],[1523176914945,["Administrator@SC-201704281511",[[-1,283,"\n"]],[283,283],[282,282]]],[1523176915436,["Administrator@SC-201704281511",[[1,282,"这个时候会创建一个swarm的manage节点，并输出一段join的命令样例。在其他的docker机器上运行上面输出的`docker swarm join`命令就可以加入集群了。\r\n\r\n```shell\r\ndocker swarm join \\\r\n--token SWMTKN-1-2apg79ozshm0x9hgqgm7v3qo4ks6qcgqzqir5z03g6y90qolf8-69il4wahmyhdai9nvs8ja6ri5 \\\r\n172.16.14.52:2377\r\n```\r\n\r\n若是忘记了init输出的密码和令牌，可以通过命令`docker swarm join-token worker`查看。\r\n\r\n# 创建服务\r\n\r\n在manager node上执行命令：\r\n\r\n```shell\r\ndocker service create --name web_server --publish 8080:80 --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n命令是在集群中创建一个叫做web_server的服务，并暴露8080端口出来\r\n\r\n通过`docker service ls`可以查看目前集群中所有的服务\r\n\r\n通过`ocker service ps [服务名]`可以查看指定的服务的所有容器[副本] 运行情况\r\n\r\n# 服务的网络\r\n\r\n默认情况下，如下创建的服务：\r\n\r\n```shell\r\ndocker service create --name web_server --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n此种创建的服务，只能在容器内访问，并不能在外部访问\r\n\r\n若是新创建服务，加上` --publish 8080:80`则会映射并暴露8080到外部。\r\n\r\n若是已经创建的服务，则执行：\r\n\r\n```shell\r\ndocker service update --publish-add 8080:80 web_server\r\n```\r\n\r\n# 弹性伸缩service\r\n\r\n若是我们要做负载均衡，就需要很多的节点，那么在swarm-manager执行：\r\n\r\n```shell\r\ndocker service scale web_server=5\r\n```\r\n\r\n这样就可以将service中的副本数量增加且恒定到5个的数量\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r\ndocker node update --availability drain swarm-manager\r\n```\r\n\r\n# 不希望在 manager 上运行 service\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r\ndocker node update --availability drain swarm-manager\r\n```"]],[282,282],[1691,1691]]],[1523176928824,["Administrator@SC-201704281511",[[-1,253,"***.***.***.***"],[1,268,"172.16.14.52"],[-1,371,"\r"],[-1,373,"\r"],[-1,383,"\r"],[-1,404,"\r"],[-1,501,"\r"],[-1,520,"\r"],[-1,525,"\r"],[-1,527,"\r"],[-1,588,"\r"],[-1,590,"\r"],[-1,598,"\r"],[-1,600,"\r"],[-1,621,"\r"],[-1,623,"\r"],[-1,633,"\r"],[-1,737,"\r"],[-1,742,"\r"],[-1,782,"\r"],[-1,784,"\r"],[-1,821,"\r"],[-1,823,"\r"],[-1,874,"\r"],[-1,876,"\r"],[-1,885,"\r"],[-1,887,"\r"],[-1,903,"\r"],[-1,905,"\r"],[-1,915,"\r"],[-1,1001,"\r"],[-1,1006,"\r"],[-1,1033,"\r"],[-1,1035,"\r"],[-1,1082,"\r"],[-1,1084,"\r"],[-1,1100,"\r"],[-1,1102,"\r"],[-1,1112,"\r"],[-1,1168,"\r"],[-1,1173,"\r"],[-1,1175,"\r"],[-1,1190,"\r"],[-1,1192,"\r"],[-1,1233,"\r"],[-1,1235,"\r"],[-1,1245,"\r"],[-1,1280,"\r"],[-1,1285,"\r"],[-1,1287,"\r"],[-1,1319,"\r"],[-1,1321,"\r"],[-1,1418,"\r"],[-1,1420,"\r"],[-1,1430,"\r"],[-1,1485,"\r"],[-1,1490,"\r"],[-1,1492,"\r"],[-1,1520,"\r"],[-1,1522,"\r"],[-1,1619,"\r"],[-1,1621,"\r"],[-1,1631,"\r"],[-1,253,"172.16.14.52\r"]],[253,268],[253,253]]],[1523176930325,["Administrator@SC-201704281511",[[1,253,"IP"]],[253,253],[255,255]]],[1523176933851,["Administrator@SC-201704281511",[[-1,485,"172.16.14.52"],[1,497,"IP"]],[253,255],[487,487]]],[1523176937081,["Administrator@SC-201704281511",[[-1,253,"IP"],[1,255,"1"]],[253,255],[254,254]]],[1523176967545,[null,[[-1,254,"172.16.14.52"],[1,276,""],[-1,484,"IP172.16.14.52"],[1,498,"vs8ja6ri5 \\\nIP"],[-1,1559,"** # 你的IP地址\n```\n这个时候会创建一个swarm的manage节点，并输出一段join的命令样例。在其他的docker机器上运行上面输出的`docker swarm join`命令就可以加入集群了。\r\n\r\n```shell\r\ndocker swarm join \\\r\n--token SWMTKN-1-2apg79ozshm0x9hgqgm7v3qo4ks6qcgqzqir5z03g6y90qolf8-69il4wahmyhdai9nvs8ja6ri5 \\\r\n172.16.14.52:2377\r\n```\r\n\r\n若是忘记了init输出的密码和令牌，可以通过命令`docker swarm join-token worker`查看。\r\n\r\n# 创建服务\r\n\r\n在manager node上执行命令：\r\n\r\n```shell\r\ndocker service create --name web_server --publish 8080:80 --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n命令是在集群中创建一个叫做web_server的服务，并暴露8080端口出来\r\n\r\n通过`docker service ls`可以查看目前集群中所有的服务\r\n\r\n通过`ocker service ps [服务名]`可以查看指定的服务的所有容器[副本] 运行情况\r\n\r\n# 服务的网络\r\n\r\n默认情况下，如下创建的服务：\r\n\r\n```shell\r\ndocker service create --name web_server --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n此种创建的服务，只能在容器内访问，并不能在外部访问\r\n\r\n若是新创建服务，加上` --publish 8080:80`则会映射并暴露8080到外部。\r\n\r\n若是已经创建的服务，则执行：\r\n\r\n```shell\r\ndocker service update --publish-add 8080:80 web_server\r\n```\r\n\r\n# 弹性伸缩service\r\n\r\n若是我们要做负载均衡，就需要很多的节点，那么在swarm-manager执行：\r\n\r\n```shell\r\ndocker service scale web_server=5\r\n```\r\n\r\n这样就可以将service中的副本数量增加且恒定到5个的数量\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r"],[-1,2778,"\r\n```\r\n\r\n# 不希望在 manager 上运行 service\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r\ndocker node update --availability drain swarm-manager\r"]],[254,254],[2778,2778]]],[1523176967545,[null,[[1,254,"172.16.14.52"],[-1,264,""],[1,472,"IP172.16.14.52"],[-1,472,"vs8ja6ri5 \\\nIP"],[1,1547,"** # 你的IP地址\n```\n这个时候会创建一个swarm的manage节点，并输出一段join的命令样例。在其他的docker机器上运行上面输出的`docker swarm join`命令就可以加入集群了。\r\n\r\n```shell\r\ndocker swarm join \\\r\n--token SWMTKN-1-2apg79ozshm0x9hgqgm7v3qo4ks6qcgqzqir5z03g6y90qolf8-69il4wahmyhdai9nvs8ja6ri5 \\\r\n172.16.14.52:2377\r\n```\r\n\r\n若是忘记了init输出的密码和令牌，可以通过命令`docker swarm join-token worker`查看。\r\n\r\n# 创建服务\r\n\r\n在manager node上执行命令：\r\n\r\n```shell\r\ndocker service create --name web_server --publish 8080:80 --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n命令是在集群中创建一个叫做web_server的服务，并暴露8080端口出来\r\n\r\n通过`docker service ls`可以查看目前集群中所有的服务\r\n\r\n通过`ocker service ps [服务名]`可以查看指定的服务的所有容器[副本] 运行情况\r\n\r\n# 服务的网络\r\n\r\n默认情况下，如下创建的服务：\r\n\r\n```shell\r\ndocker service create --name web_server --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n此种创建的服务，只能在容器内访问，并不能在外部访问\r\n\r\n若是新创建服务，加上` --publish 8080:80`则会映射并暴露8080到外部。\r\n\r\n若是已经创建的服务，则执行：\r\n\r\n```shell\r\ndocker service update --publish-add 8080:80 web_server\r\n```\r\n\r\n# 弹性伸缩service\r\n\r\n若是我们要做负载均衡，就需要很多的节点，那么在swarm-manager执行：\r\n\r\n```shell\r\ndocker service scale web_server=5\r\n```\r\n\r\n这样就可以将service中的副本数量增加且恒定到5个的数量\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r"],[1,1601,"\r\n```\r\n\r\n# 不希望在 manager 上运行 service\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r\ndocker node update --availability drain swarm-manager\r"]],[2778,2778],[254,254]]],[1523176941146,["Administrator@SC-201704281511",[[1,255,"2.168.0.10"]],[255,255],[265,265]]],[1523176945057,["Administrator@SC-201704281511",[[-1,495,"IP"],[1,497,"192.168.0.10"]],[495,497],[507,507]]],[1523176953229,["Administrator@SC-201704281511",[[-1,467,"69il4wahmyhdai9nvs8ja6ri5"],[1,492,"*****************"]],[467,492],[484,484]]],[1523176959947,["Administrator@SC-201704281511",[[1,572,"#"]],[572,572],[573,573]]],[1523176961794,["Administrator@SC-201704281511",[[1,846,"#"]],[846,846],[847,847]]],[1523176963634,["Administrator@SC-201704281511",[[1,1129,"#"]],[1129,1129],[1130,1130]]],[1523176965275,["Administrator@SC-201704281511",[[1,1431,"#"]],[1431,1431],[1432,1432]]],[1523177003821,[null,[[-1,254,"1"],[1,255,"9"],[-1,265,"72.16.14.52"],[1,467,"g6y90qolf8-"],[-1,484,"9nI"],[1,487," \\\n"],[-1,499,"72.16.14.52"],[-1,572,"#"],[1,583,"#"],[-1,846,"#"],[1,857,"#"],[-1,1129,"#"],[1,1140,"#"],[-1,1431,"#"],[1,1442,"#"],[-1,1575,"** # 你的IP地址\n```\n这个时候会创建一个swarm的manage节点，并输出一段join的命令样例。在其他的docker机器上运行上面输出的`docker swarm join`命令就可以加入集群了。\r\n\r\n```shell\r\ndocker swarm join \\\r\n--token SWMTKN-1-2apg79ozshm0x9hgqgm7v3qo4ks6qcgqzqir5z03g6y90qolf8-69il4wahmyhdai9nvs8ja6ri5 \\\r\n172.16.14.52:2377\r\n```\r\n\r\n若是忘记了init输出的密码和令牌，可以通过命令`docker swarm join-token worker`查看。\r\n\r\n# 创建服务\r\n\r\n在manager node上执行命令：\r\n\r\n```shell\r\ndocker service create --name web_server --publish 8080:80 --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n命令是在集群中创建一个叫做web_server的服务，并暴露8080端口出来\r\n\r\n通过`docker service ls`可以查看目前集群中所有的服务\r\n\r\n通过`ocker service ps [服务名]`可以查看指定的服务的所有容器[副本] 运行情况\r\n\r\n# 服务的网络\r\n\r\n默认情况下，如下创建的服务：\r\n\r\n```shell\r\ndocker service create --name web_server --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n此种创建的服务，只能在容器内访问，并不能在外部访问\r\n\r\n若是新创建服务，加上` --publish 8080:80`则会映射并暴露8080到外部。\r\n\r\n若是已经创建的服务，则执行：\r\n\r\n```shell\r\ndocker service update --publish-add 8080:80 web_server\r\n```\r\n\r\n# 弹性伸缩service\r\n\r\n若是我们要做负载均衡，就需要很多的节点，那么在swarm-manager执行：\r\n\r\n```shell\r\ndocker service scale web_server=5\r\n```\r\n\r\n这样就可以将service中的副本数量增加且恒定到5个的数量\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r"],[-1,2794,"\r\n```\r\n\r\n# 不希望在 manager 上运行 service\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r\ndocker node update --availability drain swarm-manager\r"]],[254,254],[2794,2794]]],[1523177003821,[null,[[1,254,"1"],[-1,254,"9"],[1,265,"72.16.14.52"],[-1,456,"g6y90qolf8-"],[1,484,"9nI"],[-1,484," \\\n"],[1,499,"72.16.14.52"],[1,561,"#"],[-1,571,"#"],[1,835,"#"],[-1,845,"#"],[1,1118,"#"],[-1,1128,"#"],[1,1420,"#"],[-1,1430,"#"],[1,1564,"** # 你的IP地址\n```\n这个时候会创建一个swarm的manage节点，并输出一段join的命令样例。在其他的docker机器上运行上面输出的`docker swarm join`命令就可以加入集群了。\r\n\r\n```shell\r\ndocker swarm join \\\r\n--token SWMTKN-1-2apg79ozshm0x9hgqgm7v3qo4ks6qcgqzqir5z03g6y90qolf8-69il4wahmyhdai9nvs8ja6ri5 \\\r\n172.16.14.52:2377\r\n```\r\n\r\n若是忘记了init输出的密码和令牌，可以通过命令`docker swarm join-token worker`查看。\r\n\r\n# 创建服务\r\n\r\n在manager node上执行命令：\r\n\r\n```shell\r\ndocker service create --name web_server --publish 8080:80 --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n命令是在集群中创建一个叫做web_server的服务，并暴露8080端口出来\r\n\r\n通过`docker service ls`可以查看目前集群中所有的服务\r\n\r\n通过`ocker service ps [服务名]`可以查看指定的服务的所有容器[副本] 运行情况\r\n\r\n# 服务的网络\r\n\r\n默认情况下，如下创建的服务：\r\n\r\n```shell\r\ndocker service create --name web_server --replicas=2 172.16.14.52:60000/qiyd/api:1.0\r\n```\r\n此种创建的服务，只能在容器内访问，并不能在外部访问\r\n\r\n若是新创建服务，加上` --publish 8080:80`则会映射并暴露8080到外部。\r\n\r\n若是已经创建的服务，则执行：\r\n\r\n```shell\r\ndocker service update --publish-add 8080:80 web_server\r\n```\r\n\r\n# 弹性伸缩service\r\n\r\n若是我们要做负载均衡，就需要很多的节点，那么在swarm-manager执行：\r\n\r\n```shell\r\ndocker service scale web_server=5\r\n```\r\n\r\n这样就可以将service中的副本数量增加且恒定到5个的数量\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r"],[1,1618,"\r\n```\r\n\r\n# 不希望在 manager 上运行 service\r\n\r\n默认配置下 manager node 也是 worker node，所以 swarm-manager 上也运行了副本。如果不希望在 manager 上运行 service，可以执行如下命令：\r\n\r\n```shell\r\ndocker node update --availability drain swarm-manager\r"]],[2794,2794],[254,254]]],[1523176985304,["Administrator@SC-201704281511",[[-1,682,"7"],[1,683,"9"],[-1,687,".14.52"],[1,693,"8.0.10"]],[600,600],[693,693]]],[1523176987881,["Administrator@SC-201704281511",[[-1,934,"7"],[1,935,"9"],[-1,939,".14.52"],[1,945,"8.0.10"]],[933,945],[945,945]]],[1523176989842,["Administrator@SC-201704281511",[[-1,700,"qiyd"],[1,704,"TEST"]],[700,704],[704,704]]],[1523176991642,["Administrator@SC-201704281511",[[-1,700,"TEST"],[1,704,"test"]],[700,704],[704,704]]],[1523176993508,["Administrator@SC-201704281511",[[-1,952,"qiyd"],[1,956,"test"]],[952,956],[956,956]]],[1523177003089,["Administrator@SC-201704281511",[[-1,1622,"\n"]],[1622,1622],[1622,1622]]]]]]}